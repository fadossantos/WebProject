#server.port: 8443
#server.ssl.key-store: src\\main\\resources\\keystore.p12
#server.ssl.key-store-password: tomcat
#server.ssl.keyStoreType: PKCS12
#server.ssl.keyAlias: tomcat

#SPRING MVC
spring.view.prefix: /WEB-INF/jsp/
spring.view.suffix: .jsp


# DataSource settings: set here your own configurations for the database 
# connection. In this example we have "netgloo_blog" as database name and 
# "root" as username and password.
spring.datasource.url = jdbc:mysql://dedicatoriesdb.cwrmo14g4xfu.us-west-2.rds.amazonaws.com:3306/inspecao_seguros
spring.datasource.username = inspecao_seguros
spring.datasource.password = inspecao_seguros

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

#Key
token.secret = "my-very-secret-key"

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
# spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

logging.level.org.springframework.web=INFO
logging.level.br.com.br.com.tmsfasdom=DEBUG
logging.level.org.hibernate=ERROR
logging.file=logs/spring-boot-logging.log